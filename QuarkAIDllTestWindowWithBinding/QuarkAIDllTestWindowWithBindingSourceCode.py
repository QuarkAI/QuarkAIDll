from __future__ import division
import math, numpy, sys, time, pygame
import tkinter as tk
from OpenGL.GL import *
from OpenGL.GLU import *
from tkinter import *
import os
if __name__ == "__main__":
    w = 640
    h = 480
    fov = 75
    #pygame.init()
    root = Tk()
    root.title('QuarkAITestWindows')
    root.wm_iconbitmap('ico64.ico')
    root.geometry('640x480')
    embed = Frame(root, width = 640, height = 480) #creates embed frame for pygame window
    embed.grid(columnspan = 640, rowspan = 480) # Adds grid
    logoimg =tk.PhotoImage(file = 'logo.png')
    os.environ['SDL_WINDOWID'] = str(embed.winfo_id())
    os.environ['SDL_VIDEODRIVER'] = 'windib'
    pygame.display.init()
    screen = pygame.display.set_mode((w,h), pygame.OPENGL |pygame.DOUBLEBUF|pygame.OPENGLBLIT)
    pygame.display.set_caption('QuarkAITest')
    surface = pygame.image.load('ico64.ico')
    pygame.display.set_icon(surface)
    textureSurface = pygame.image.load("logo.jpg")
    textureData = pygame.image.tostring(textureSurface, "RGBA", 1)
    logowidth = textureSurface.get_width()
    logoheight = textureSurface.get_height()        
    glEnable(GL_TEXTURE_2D)
    logo = glGenTextures(1)
    glBindTexture(GL_TEXTURE_2D, logo)
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, logowidth, logoheight,0, GL_RGBA, GL_UNSIGNED_BYTE, textureData)
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT)
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT)
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST)
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST)
    textureSurface = pygame.image.load("panel.bmp")
    textureData = pygame.image.tostring(textureSurface, "RGBA", 1)
    panelwidth = textureSurface.get_width()
    panelheight = textureSurface.get_height()
    glEnable(GL_TEXTURE_2D)
    panel = glGenTextures(1)
    glBindTexture(GL_TEXTURE_2D, panel)
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, panelwidth, panelheight,0, GL_RGBA, GL_UNSIGNED_BYTE, textureData)
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT)
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT)
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST)
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST)
    glMatrixMode(GL_MODELVIEW)
    glLoadMatrixf(numpy.array([0.741,-0.365,0.563,0,0,0.839,0.544, 0,-0.671,-0.403,0.622,0,-0.649,1.72,-4.05,1]))
    
    while True:
        pygame.display.flip()
        pygame.event.pump()
        keys = dict((int(i),int(v)) for i,v in enumerate(pygame.key.get_pressed()) if i<512)      
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
        glViewport(0, 0, w, h)        
        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        gluPerspective(45.0, float(w)/float(h), 0.01, 10000.0)
        glEnable(GL_DEPTH_TEST)
        glMatrixMode(GL_MODELVIEW)
        glDepthFunc(GL_LESS)
        glEnable(GL_DEPTH_TEST)
        glShadeModel(GL_SMOOTH)
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
        glBindTexture(GL_TEXTURE_2D, logo)
        glRotatef(0.1,0.0,1.0,0.0)
        glBegin(GL_QUADS)
        glTexCoord2f(0.0, 0.0)
        glVertex3f(-1.0, -1.0,  1.0)
        glTexCoord2f(1.0, 0.0)
        glVertex3f(1.0, -1.0,  1.0)
        glTexCoord2f(1.0, 1.0)
        glVertex3f(1.0,  1.0,  1.0)
        glTexCoord2f(0.0, 1.0)
        glVertex3f(-1.0,  1.0,  1.0)
        glTexCoord2f(1.0, 0.0)
        glVertex3f(-1.0, -1.0, -1.0)
        glTexCoord2f(1.0, 1.0)
        glVertex3f(-1.0,  1.0, -1.0)
        glTexCoord2f(0.0, 1.0)
        glVertex3f(1.0,  1.0, -1.0)
        glTexCoord2f(0.0, 0.0)
        glVertex3f(1.0, -1.0, -1.0)
        glTexCoord2f(0.0, 1.0)
        glVertex3f(-1.0,  1.0, -1.0)
        glTexCoord2f(0.0, 0.0)
        glVertex3f(-1.0,  1.0,  1.0)
        glTexCoord2f(1.0, 0.0)
        glVertex3f(1.0,  1.0,  1.0)
        glTexCoord2f(1.0, 1.0)
        glVertex3f(1.0,  1.0, -1.0)
        glTexCoord2f(1.0, 1.0)
        glVertex3f(-1.0, -1.0, -1.0)
        glTexCoord2f(0.0, 1.0)
        glVertex3f(1.0, -1.0, -1.0)
        glTexCoord2f(0.0, 0.0)
        glVertex3f(1.0, -1.0,  1.0)
        glTexCoord2f(1.0, 0.0)
        glVertex3f(-1.0, -1.0,  1.0)
        glTexCoord2f(1.0, 0.0)
        glVertex3f(1.0, -1.0, -1.0)
        glTexCoord2f(1.0, 1.0)
        glVertex3f(1.0,  1.0, -1.0)
        glTexCoord2f(0.0, 1.0)
        glVertex3f(1.0,  1.0,  1.0)
        glTexCoord2f(0.0, 0.0)
        glVertex3f(1.0, -1.0,  1.0)
        glTexCoord2f(0.0, 0.0)
        glVertex3f(-1.0, -1.0, -1.0)
        glTexCoord2f(1.0, 0.0)
        glVertex3f(-1.0, -1.0,  1.0)
        glTexCoord2f(1.0, 1.0)
        glVertex3f(-1.0,  1.0,  1.0)
        glTexCoord2f(0.0, 1.0)
        glVertex3f(-1.0,  1.0, -1.0)
        glEnd()

        if pygame.mouse.get_pressed()[0]==True:
            delta_x, delta_y = pygame.mouse.get_pos()
            if (delta_x>417) and (delta_x<563) and (delta_y>424) and (delta_y<467):
                glMatrixMode(GL_MODELVIEW)
                glLoadMatrixf(numpy.array([0.741,-0.365,0.563,0,0,0.839,0.544, 0,-0.671,-0.403,0.622,0,-0.649,1.72,-4.05,1]))

        fwd = .05 * (keys[pygame.K_w]-keys[pygame.K_s]) 
        strafe = .05 * (keys[pygame.K_a]-keys[pygame.K_d])
        lift = .05 * (keys[pygame.K_e]-keys[pygame.K_q])
        horizonal = 1.0 * (keys[pygame.K_DOWN]-keys[pygame.K_UP])
        vertical = 1.0 * (keys[pygame.K_RIGHT]-keys[pygame.K_LEFT])
        
        if keys[pygame.K_r]:
            glMatrixMode(GL_MODELVIEW)
            glLoadMatrixf(numpy.array([0.741,-0.365,0.563,0,0,0.839,0.544, 0,-0.671,-0.403,0.622,0,-0.649,1.72,-4.05,1]))

        if abs(horizonal) or abs(vertical):
            look_speed = 0.2
            buffer = glGetDoublev(GL_MODELVIEW_MATRIX)
            c = (-1 * numpy.mat(buffer[:3,:3]) * numpy.mat(buffer[3,:3]).T).reshape(3,1)
            glTranslate(c[0],c[1],c[2])
            m = buffer.flatten()
            glRotate(vertical * look_speed, m[1],m[5],m[9])
            glRotate(horizonal * look_speed, m[0],m[4],m[8])
            glRotated(-math.atan2(-m[4],m[5]) *57.295779513082320876798154814105 ,m[2],m[6],m[10])
            glTranslate(-c[0],-c[1],-c[2])
            
        if abs(fwd) or abs(strafe) or abs(lift):
            m = glGetDoublev(GL_MODELVIEW_MATRIX).flatten()
            glTranslate(fwd*m[2],fwd*m[6],fwd*m[10])
            glTranslate(lift*m[1],lift*m[5],lift*m[9])
            glTranslate(strafe*m[0],strafe*m[4],strafe*m[8])
        
        glPushMatrix()
        glLoadIdentity()
        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        gluOrtho2D(0.0, w, h, 0.0)
        glMatrixMode(GL_MODELVIEW)        
        glDisable(GL_DEPTH_TEST)
        glBindTexture(GL_TEXTURE_2D, panel)        
        glBegin(GL_QUADS)
        glTexCoord2d(0.0, 1.0)
        glVertex2f(0, 414)
        glTexCoord2f(1.0, 1.0)
        glVertex2f(640, 414)
        glTexCoord2f(1.0, 0.0)
        glVertex2f(640, 480)
        glTexCoord2f(0.0, 0.0)
        glVertex2f(0, 480)
        glEnd()       
        glPopMatrix()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    pygame.quit()

        root.update_idletasks()
        root.update()
